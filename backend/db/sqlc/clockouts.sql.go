// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: clockouts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createClockOut = `-- name: CreateClockOut :one
INSERT INTO "ClockOuts" (
  employee_id,
  clock_in_id
) VALUES (
  $1, $2
)
RETURNING id, employee_id, clock_in_id, clock_out_time
`

type CreateClockOutParams struct {
	EmployeeID uuid.UUID `json:"employee_id"`
	ClockInID  int32     `json:"clock_in_id"`
}

func (q *Queries) CreateClockOut(ctx context.Context, arg CreateClockOutParams) (ClockOut, error) {
	row := q.db.QueryRowContext(ctx, createClockOut, arg.EmployeeID, arg.ClockInID)
	var i ClockOut
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.ClockInID,
		&i.ClockOutTime,
	)
	return i, err
}

const getClockOut = `-- name: GetClockOut :one
SELECT id, employee_id, clock_in_id, clock_out_time FROM "ClockOuts"
WHERE "id" = $1
`

func (q *Queries) GetClockOut(ctx context.Context, id int32) (ClockOut, error) {
	row := q.db.QueryRowContext(ctx, getClockOut, id)
	var i ClockOut
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.ClockInID,
		&i.ClockOutTime,
	)
	return i, err
}

const listClockOuts = `-- name: ListClockOuts :many
SELECT id, employee_id, clock_in_id, clock_out_time FROM "ClockOuts"
WHERE "employee_id" = $1
`

func (q *Queries) ListClockOuts(ctx context.Context, employeeID uuid.UUID) ([]ClockOut, error) {
	rows, err := q.db.QueryContext(ctx, listClockOuts, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClockOut
	for rows.Next() {
		var i ClockOut
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.ClockInID,
			&i.ClockOutTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
