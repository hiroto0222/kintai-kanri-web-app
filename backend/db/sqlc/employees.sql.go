// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: employees.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO "Employees" (
  first_name,
  last_name,
  email,
  phone,
  address,
  hashed_password,
  role_id,
  is_admin
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, first_name, last_name, email, phone, address, hashed_password, role_id, is_admin, created_at
`

type CreateEmployeeParams struct {
	FirstName      string        `json:"first_name"`
	LastName       string        `json:"last_name"`
	Email          string        `json:"email"`
	Phone          string        `json:"phone"`
	Address        string        `json:"address"`
	HashedPassword string        `json:"hashed_password"`
	RoleID         sql.NullInt32 `json:"role_id"`
	IsAdmin        bool          `json:"is_admin"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.HashedPassword,
		arg.RoleID,
		arg.IsAdmin,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.HashedPassword,
		&i.RoleID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM "Employees"
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployeeByEmail = `-- name: GetEmployeeByEmail :one
SELECT id, first_name, last_name, email, phone, address, hashed_password, role_id, is_admin, created_at FROM "Employees"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByEmail(ctx context.Context, email string) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeByEmail, email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.HashedPassword,
		&i.RoleID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployeeById = `-- name: GetEmployeeById :one
SELECT id, first_name, last_name, email, phone, address, hashed_password, role_id, is_admin, created_at FROM "Employees"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployeeById(ctx context.Context, id uuid.UUID) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeById, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.HashedPassword,
		&i.RoleID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, first_name, last_name, email, phone, address, hashed_password, role_id, is_admin, created_at FROM "Employees"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.HashedPassword,
			&i.RoleID,
			&i.IsAdmin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
