basePath: /api
definitions:
  controllers.EmployeeResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_admin:
        type: boolean
      last_name:
        type: string
      phone:
        type: string
      role_id:
        $ref: '#/definitions/sql.NullInt32'
    type: object
  controllers.logInEmployeeRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.logInEmployeeResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/controllers.EmployeeResponse'
    type: object
  controllers.refreshAccessTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  controllers.refreshAccessTokenResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
    type: object
  controllers.registerEmployeeRequest:
    properties:
      address:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_admin:
        type: boolean
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role_id:
        $ref: '#/definitions/sql.NullInt32'
    required:
    - address
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  controllers.reqCreateClockIn:
    properties:
      employee_id:
        type: string
    required:
    - employee_id
    type: object
  controllers.reqCreateClockOut:
    properties:
      employee_id:
        type: string
    required:
    - employee_id
    type: object
  controllers.reqListClockInsAndClockOuts:
    properties:
      employeeID:
        type: string
    required:
    - employeeID
    type: object
  db.ClockIn:
    properties:
      clock_in_time:
        type: string
      clocked_out:
        type: boolean
      employee_id:
        type: string
      id:
        type: integer
    type: object
  db.ClockOut:
    properties:
      clock_in_id:
        type: integer
      clock_out_time:
        type: string
      employee_id:
        type: string
      id:
        type: integer
    type: object
  db.ClockOutTxResult:
    properties:
      clock_out:
        $ref: '#/definitions/db.ClockOut'
    type: object
  db.ListClockInsAndClockOutsRow:
    properties:
      clock_in_id:
        type: integer
      clock_in_time:
        type: string
      clock_out_id:
        $ref: '#/definitions/sql.NullInt32'
      clock_out_time:
        $ref: '#/definitions/sql.NullTime'
      employee_id:
        type: string
    type: object
  sql.NullInt32:
    properties:
      int32:
        type: integer
      valid:
        description: Valid is true if Int32 is not NULL
        type: boolean
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: 勤怠管理API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.logInEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.logInEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: 従業員認証
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.refreshAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.refreshAccessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: トークンのリフレッシュ
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.registerEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 従業員登録（管理者 Admin Only）
      tags:
      - auth
  /clockins:
    get:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.reqListClockInsAndClockOuts'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.ListClockInsAndClockOutsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 従業員の打刻一覧を取得
      tags:
      - clockins
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.reqCreateClockIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.ClockIn'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 出勤打刻
      tags:
      - clockins
  /clockouts:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.reqCreateClockOut'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.ClockOutTxResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 退出打刻
      tags:
      - clockouts
  /employees/:id:
    get:
      consumes:
      - application/json
      parameters:
      - description: ID of the employee to retrieve
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 従業員情報を取得
      tags:
      - employees
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
